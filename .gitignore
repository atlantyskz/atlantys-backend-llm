# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/


/data
/mongo_data

{
  "candidate_info": {
    "fullname": "Абдрахман Мухаммед",
    "gender": "Мужчина",
    "age": 22,
    "birth_date": "13 марта 2002",
    "contacts": {
      "phone_number": "+7 (778) 0028649",
      "email": "muhammed03amin@gmail.com",
      "preferred_contact": "email"
    },
    "location": "Алматы",
    "languages": ["Казахский (родной)", "Русский (C2)", "Английский (B2)"]
  },
  "job_preferences": {
    "desired_position": "Frontend Developer",
    "specializations": ["Программист, разработчик"],
    "employment_type": "Полная занятость",
    "work_schedule": "Полный день",
    "desired_salary": "Не указана"
  },
  "experience": {
    "overall_years": "3 года 7 месяцев",
    "details": [
      {
        "duration": "8 месяцев",
        "company_name": "Агент Полис",
        "role": "Frontend-разработчик",
      },
      {
        "duration": "1 год 8 месяцев",
        "company_name": "iBEC Systems",
        "role": "Frontend-разработчик",
      },
      {
        "duration": "6 месяцев",
        "company_name": "DAR",
        "role": "Frontend-разработчик",
      },
      {
        "duration": "1 год",
        "company_name": "IDIA Market",
        "role": "Старший разработчик ПО",
      }
    ]
  },
  "education": {
    "degrees": ["Магистр", "Бакалавр"],
  },
  "skills": [
      "JavaScript",
      "React",
      "TypeScript",
      "Vue.js",
      "Redux",
      "Node.js",
      "Docker",
      "Git",
      "Webpack",
      "Tailwind",
      "Gulp",
      "Jest",
      "React Testing Library",
      "CI/CD Tools",
    "Agile", "Scrum",
    "Обучаемость", "Адаптивная верстка",
  },
  "analysis": {
    "advantages": [
      "Сильный опыт разработки на фронтенд, включая крупные проекты",
      "Хорошее знание популярных технологий и фреймворков (React, TypeScript, Docker)",
      "Умение работать с SEO и улучшением производительности веб-сайтов",
      "Опыт интеграции внешних API и работы в командах с использованием Agile"
    ],
    "disadvantages": [
      "Отсутствие упоминания опыта работы с облачными технологиями",
      "Меньше опыта в backend-разработке",
      "Возможный недостаток в глубоком знании DevOps-практик"
    ],
    "overall_comment": "Сильный бэкенд разработчик,Нет опыта облачных технологий, Подходит для роли бэкенд-разработчика"  
}
